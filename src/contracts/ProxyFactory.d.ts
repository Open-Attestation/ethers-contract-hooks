/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ProxyFactoryInterface extends Interface {
  functions: {
    deployMinimal: TypedFunctionDescription<{
      encode([_logic, _data]: [string, Arrayish]): string;
    }>;

    deploy: TypedFunctionDescription<{
      encode([_salt, _logic, _admin, _data]: [
        BigNumberish,
        string,
        string,
        Arrayish
      ]): string;
    }>;

    deploySigned: TypedFunctionDescription<{
      encode([_salt, _logic, _admin, _data, _signature]: [
        BigNumberish,
        string,
        string,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    getDeploymentAddress: TypedFunctionDescription<{
      encode([_salt, _sender]: [BigNumberish, string]): string;
    }>;

    getSigner: TypedFunctionDescription<{
      encode([_salt, _logic, _admin, _data, _signature]: [
        BigNumberish,
        string,
        string,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    ProxyCreated: TypedEventDescription<{
      encodeTopics([proxy]: [null]): string[];
    }>;
  };
}

export class ProxyFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ProxyFactory;
  attach(addressOrName: string): ProxyFactory;
  deployed(): Promise<ProxyFactory>;

  on(event: EventFilter | string, listener: Listener): ProxyFactory;
  once(event: EventFilter | string, listener: Listener): ProxyFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ProxyFactory;
  removeAllListeners(eventName: EventFilter | string): ProxyFactory;
  removeListener(eventName: any, listener: Listener): ProxyFactory;

  interface: ProxyFactoryInterface;

  functions: {
    deployMinimal(
      _logic: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deploy(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deploySigned(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish,
      _signature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getDeploymentAddress(_salt: BigNumberish, _sender: string): Promise<string>;

    getSigner(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish,
      _signature: Arrayish
    ): Promise<string>;
  };

  deployMinimal(
    _logic: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deploy(
    _salt: BigNumberish,
    _logic: string,
    _admin: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deploySigned(
    _salt: BigNumberish,
    _logic: string,
    _admin: string,
    _data: Arrayish,
    _signature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getDeploymentAddress(_salt: BigNumberish, _sender: string): Promise<string>;

  getSigner(
    _salt: BigNumberish,
    _logic: string,
    _admin: string,
    _data: Arrayish,
    _signature: Arrayish
  ): Promise<string>;

  filters: {
    ProxyCreated(proxy: null): EventFilter;
  };

  estimate: {
    deployMinimal(_logic: string, _data: Arrayish): Promise<BigNumber>;

    deploy(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish
    ): Promise<BigNumber>;

    deploySigned(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish,
      _signature: Arrayish
    ): Promise<BigNumber>;

    getDeploymentAddress(
      _salt: BigNumberish,
      _sender: string
    ): Promise<BigNumber>;

    getSigner(
      _salt: BigNumberish,
      _logic: string,
      _admin: string,
      _data: Arrayish,
      _signature: Arrayish
    ): Promise<BigNumber>;
  };
}

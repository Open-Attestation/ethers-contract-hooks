/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BaseAdminUpgradeabilityProxyInterface extends Interface {
  functions: {
    admin: TypedFunctionDescription<{encode([]: []): string}>;

    implementation: TypedFunctionDescription<{encode([]: []): string}>;

    changeAdmin: TypedFunctionDescription<{
      encode([newAdmin]: [string]): string;
    }>;

    upgradeTo: TypedFunctionDescription<{
      encode([newImplementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([newImplementation, data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    AdminChanged: TypedEventDescription<{
      encodeTopics([previousAdmin, newAdmin]: [null, null]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class BaseAdminUpgradeabilityProxy extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): BaseAdminUpgradeabilityProxy;
  attach(addressOrName: string): BaseAdminUpgradeabilityProxy;
  deployed(): Promise<BaseAdminUpgradeabilityProxy>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  once(
    event: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  removeAllListeners(
    eventName: EventFilter | string
  ): BaseAdminUpgradeabilityProxy;
  removeListener(
    eventName: any,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;

  interface: BaseAdminUpgradeabilityProxyInterface;

  functions: {
    admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    implementation(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  implementation(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    admin(): Promise<BigNumber>;

    implementation(): Promise<BigNumber>;

    changeAdmin(newAdmin: string): Promise<BigNumber>;

    upgradeTo(newImplementation: string): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish
    ): Promise<BigNumber>;
  };
}

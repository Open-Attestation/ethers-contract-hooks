/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from ".";

interface DocumentStoreInterface extends Interface {
  functions: {
    documentIssued: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    documentRevoked: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    initialize: TypedFunctionDescription<{
      encode([_name, owner]: [string, string]): string;
    }>;

    issue: TypedFunctionDescription<{ encode([document]: [Arrayish]): string }>;

    bulkIssue: TypedFunctionDescription<{
      encode([documents]: [Arrayish[]]): string;
    }>;

    getIssuedBlock: TypedFunctionDescription<{
      encode([document]: [Arrayish]): string;
    }>;

    isIssued: TypedFunctionDescription<{
      encode([document]: [Arrayish]): string;
    }>;

    isIssuedBefore: TypedFunctionDescription<{
      encode([document, blockNumber]: [Arrayish, BigNumberish]): string;
    }>;

    revoke: TypedFunctionDescription<{ encode([document]: [Arrayish]): string }>;

    bulkRevoke: TypedFunctionDescription<{
      encode([documents]: [Arrayish[]]): string;
    }>;

    isRevoked: TypedFunctionDescription<{
      encode([document]: [Arrayish]): string;
    }>;

    isRevokedBefore: TypedFunctionDescription<{
      encode([document, blockNumber]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {
    DocumentIssued: TypedEventDescription<{
      encodeTopics([document]: [Arrayish | null]): string[];
    }>;

    DocumentRevoked: TypedEventDescription<{
      encodeTopics([document]: [Arrayish | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [string | null, string | null]): string[];
    }>;
  };
}

export class DocumentStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DocumentStore;
  attach(addressOrName: string): DocumentStore;
  deployed(): Promise<DocumentStore>;

  on(event: EventFilter | string, listener: Listener): DocumentStore;
  once(event: EventFilter | string, listener: Listener): DocumentStore;
  addListener(eventName: EventFilter | string, listener: Listener): DocumentStore;
  removeAllListeners(eventName: EventFilter | string): DocumentStore;
  removeListener(eventName: any, listener: Listener): DocumentStore;

  interface: DocumentStoreInterface;

  functions: {
    documentIssued(arg0: Arrayish): Promise<BigNumber>;

    documentRevoked(arg0: Arrayish): Promise<BigNumber>;

    isOwner(): Promise<boolean>;

    name(): Promise<string>;

    owner(): Promise<string>;

    renounceOwnership(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    version(): Promise<string>;

    initialize(_name: string, owner: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    issue(document: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    bulkIssue(documents: Arrayish[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

    getIssuedBlock(document: Arrayish): Promise<BigNumber>;

    isIssued(document: Arrayish): Promise<boolean>;

    isIssuedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<boolean>;

    revoke(document: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    bulkRevoke(documents: Arrayish[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

    isRevoked(document: Arrayish): Promise<boolean>;

    isRevokedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<boolean>;
  };

  documentIssued(arg0: Arrayish): Promise<BigNumber>;

  documentRevoked(arg0: Arrayish): Promise<BigNumber>;

  isOwner(): Promise<boolean>;

  name(): Promise<string>;

  owner(): Promise<string>;

  renounceOwnership(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  version(): Promise<string>;

  initialize(_name: string, owner: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  issue(document: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  bulkIssue(documents: Arrayish[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getIssuedBlock(document: Arrayish): Promise<BigNumber>;

  isIssued(document: Arrayish): Promise<boolean>;

  isIssuedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<boolean>;

  revoke(document: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  bulkRevoke(documents: Arrayish[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

  isRevoked(document: Arrayish): Promise<boolean>;

  isRevokedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<boolean>;

  filters: {
    DocumentIssued(document: Arrayish | null): EventFilter;

    DocumentRevoked(document: Arrayish | null): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;
  };

  estimate: {
    documentIssued(arg0: Arrayish): Promise<BigNumber>;

    documentRevoked(arg0: Arrayish): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    version(): Promise<BigNumber>;

    initialize(_name: string, owner: string): Promise<BigNumber>;

    issue(document: Arrayish): Promise<BigNumber>;

    bulkIssue(documents: Arrayish[]): Promise<BigNumber>;

    getIssuedBlock(document: Arrayish): Promise<BigNumber>;

    isIssued(document: Arrayish): Promise<BigNumber>;

    isIssuedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<BigNumber>;

    revoke(document: Arrayish): Promise<BigNumber>;

    bulkRevoke(documents: Arrayish[]): Promise<BigNumber>;

    isRevoked(document: Arrayish): Promise<BigNumber>;

    isRevokedBefore(document: Arrayish, blockNumber: BigNumberish): Promise<BigNumber>;
  };
}
